//--------------------------------------------------------------
// Lexical Grammer

%lex

%%

\s+        /* skip whitespace */

\d+        return 'NUMBER'

// Operator Groups
[+/-]      return 'ADDITIVE_OPERATOR'
[*//]      return 'MULTIPLICATIVE_OPERATOR'

/lex

//--------------------------------------------------------------
// Syntactic Grammer

%%

// Lowest Precedence
Expression
  : AdditiveExpression
  ;

AdditiveExpression 
  : AdditiveExpression ADDITIVE_OPERATOR MultiplicativeExpression 
    { 
      $$ = 
        {
          type: 'BinaryExpression',
          op: $2,
          left: $1,
          right: $3,
        }
    }
  | MultiplicativeExpression
  ;

MultiplicativeExpression
  : MultiplicativeExpression MULTIPLICATIVE_OPERATOR Factor 
    { 
      $$ = 
        {
            type: 'BinaryExpression',
            op: $2,
            left: $1,
            right: $3,
        }
    }
  | Factor
  ;

Factor
  : Literal
  | ParenthesizedExpression
  ;  

Literal
  : NumericLiteral 
  ;

NumericLiteral
  : NUMBER 
      { 
        $$ = 
          {
            type: 'NumericLiteral',
            value: Number($1),
          }
      } // Converts the string to a number, Abstract Syntax Tree (AST) node
  ;

// Highest Precedence
ParenthesizedExpression
  : '(' Expression ')' { $$ = $2; } // Simply returns the expression
  ;
