//--------------------------------------------------------------
// Lexical Grammer

%lex

%%

\s+        /* skip whitespace */

\d+        return 'NUMBER'

// Operator Groups
[+/-]      return 'ADDITIVE_OPERATOR'
[*//]      return 'MULTIPLICATIVE_OPERATOR'

/lex

//--------------------------------------------------------------
// Module include

%{ 
  function BinaryExpression(left, opt, right) {
    return {
      type: 'BinaryExpression',
      op: opt,
      left: left,
      right: right,
    };
  }
%}

//--------------------------------------------------------------
// Syntactic Grammer

%%

Program
  : StatementList
    { 
      $$ = 
        {
          type: 'Program',
          body: $1,
        }
    }
  ;

StatementList
  : Statement
    { $$ = [$1] }
  | StatementList Statement
    { $1.push($2); $$ = $1 }
  ;

Statement
  : ExpressionStatement
  | EmptyStatement
  | BlockStatement
  ;

BlockStatement
  : '{' StatementList '}' 
    { 
      $$ = 
        {
          type: 'BlockStatement',
          statementList: $2,
        }
    }
  ;
  
ExpressionStatement
  : Expression ';'
    { 
      $$ = 
        {
          type: 'ExpressionStatement',
          expression: $1,
        }
    }
  ;

EmptyStatement
  : ';'
    {
      $$ = 
        {
          type: 'EmptyStatement',
        }
    }
  ;

// Lowest Precedence
Expression
  : AdditiveExpression
  ;

AdditiveExpression 
  : AdditiveExpression ADDITIVE_OPERATOR MultiplicativeExpression 
    { $$ = BinaryExpression($1, $2, $3) }
  | MultiplicativeExpression
  ;

MultiplicativeExpression
  : MultiplicativeExpression MULTIPLICATIVE_OPERATOR Factor 
    { $$ = BinaryExpression($1, $2, $3) }
  | Factor
  ;

Factor
  : Literal
  | ParenthesizedExpression
  ;  

Literal
  : NumericLiteral 
  ;

NumericLiteral
  : NUMBER 
      { 
        $$ = 
          {
            type: 'NumericLiteral',
            value: Number($1),
          }
      } // Converts the string to a number, Abstract Syntax Tree (AST) node
  ;

// Highest Precedence
ParenthesizedExpression
  : '(' Expression ')' { $$ = $2; } // Simply returns the expression
  ;
